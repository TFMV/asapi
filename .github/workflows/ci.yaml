name: CI/CD

on:
  pull_request:
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Run Linters
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
      - name: Lint
        run: make lint
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # test python versions
          - python: "3.8"
            os: ubuntu-latest
          - python: "3.9"
            os: ubuntu-latest
          - python: "3.10"
            os: ubuntu-latest
          - python: "3.11"
            os: ubuntu-latest
          - python: "3.12"
            os: ubuntu-latest
          # test OSs
          - python: "3.x"
            os: macos-latest
          - python: "3.x"
            os: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.3.1
      - name: Test
        run: make test
      - name: Export Coverage Report
        run: |
          poetry run pip install "coverage[toml]"
          poetry run coverage html
        # upload html coverage report as github artifact
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov

  version-check:
    name: Check Version Bump
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
          path: current
      - uses: actions/checkout@v2
        with:
          ref: main
          path: main
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.3.0
      - name: Check version bump
        run: |
          cd $GITHUB_WORKSPACE/current
          NEW_VERSION=$(poetry version -s)
          cd $GITHUB_WORKSPACE/main
          OLD_VERSION=$(poetry version -s)
          python -c "from packaging import version;assert version.parse(\"${NEW_VERSION}\") > version.parse(\"${OLD_VERSION}\"), \"❌ Bad version bump detected: you must bump the version in pyproject.toml\""
          python -c "print(\"✅ Version will be bumped from ${OLD_VERSION} to ${NEW_VERSION}\")"
  test-docs-build:
    name: Run Test Docs Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.3.1
      - name: Build Docs
        run: make docs-build
  docs:
    if: github.ref == 'refs/heads/main'
    concurrency: docs-branch
    name: 🚀 Deploy Docs 📄
    runs-on: ubuntu-latest
    needs: ["test", "lint", "test-docs-build"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all commits/branches
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.3.0
      - name: Deploy docs
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          make docs-deploy

  # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  check:
    if: always()
    needs: ["lint", "test", "version-check", "test-docs-build"]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          allowed-skips: ${{ github.ref == 'refs/heads/main' && 'test-e2e, test-dev-stack' || '' }}
          jobs: ${{ toJSON(needs) }}

  pypi:
    if: github.ref == 'refs/heads/main'
    name: 🚀 PyPi Release 📦
    runs-on: ubuntu-latest
    needs: ["check"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.3.0
      - name: Release on PyPi
        continue-on-error: true  # allow pushes to main that don't release
        id: pypi
        run: |
          PACKAGE_VERSION=$(poetry version -s)
          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_ENV
          printf "\nSee this release on GitHub: [v$PACKAGE_VERSION](https://github.com/$GITHUB_REPOSITORY/releases/tag/$PACKAGE_VERSION)\n" >> README.md
          poetry config pypi-token.pypi "${{ secrets.PYPI_TOKEN }}"
          poetry publish --build
      - name: 🚀 Create GitHub Release 😺
        uses: ncipollo/release-action@v1
        if: steps.pypi.outcome == 'success'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.package_version }}
          generateReleaseNotes: true
